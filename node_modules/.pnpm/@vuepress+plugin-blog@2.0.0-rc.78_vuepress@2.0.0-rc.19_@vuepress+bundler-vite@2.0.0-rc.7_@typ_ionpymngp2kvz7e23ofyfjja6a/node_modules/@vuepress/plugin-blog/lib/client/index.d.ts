import * as vue from 'vue';
import { ComputedRef } from 'vue';
import { PageFrontmatter } from 'vuepress/shared';

interface Article<T extends Record<string, unknown> = Record<string, unknown>> {
    /**
     * Article path
     *
     * 文章路径
     */
    path: string;
    /**
     * Article info
     *
     * 文章信息
     */
    info: T;
}
interface BlogCategoryData<T extends Record<string, unknown> = Record<string, unknown>> {
    /**
     * Category path
     *
     * 分类路径
     */
    path: string;
    /**
     * Only available when current route matches an item path
     *
     * 仅当当前路径和某个子项目匹配时可用
     */
    currentItems?: Article<T>[];
    /**
     * Category map
     *
     * 分类映射
     */
    map: Record<
    /**
     * Unique key under current category
     *
     * 当前分类下全局唯一的 key
     */
    string, {
        /**
         * Category path of the key
         *
         * 对应键值的分类路径
         */
        path: string;
        /**
         * Category items of the key
         *
         * 对应键值的项目
         */
        items: Article<T>[];
    }>;
}
interface BlogTypeData<T extends Record<string, unknown> = Record<string, unknown>> {
    /**
     * Type path
     *
     * 类别路径
     */
    path: string;
    /**
     * Items under current type
     *
     * 当前类别下的项目
     */
    items: Article<T>[];
}

declare const blogCategoryMap: Readonly<vue.Ref<{
    readonly [x: string]: {
        readonly [x: string]: {
            readonly path: string;
            readonly map: {
                readonly [x: string]: {
                    readonly path: string;
                    readonly indexes: readonly number[];
                };
            };
        };
    };
}, {
    readonly [x: string]: {
        readonly [x: string]: {
            readonly path: string;
            readonly map: {
                readonly [x: string]: {
                    readonly path: string;
                    readonly indexes: readonly number[];
                };
            };
        };
    };
}>>;
declare const useBlogCategory: <T extends Record<string, unknown> = Record<string, unknown>>(key?: string) => ComputedRef<BlogCategoryData<T>>;

declare const blogTypeMap: Readonly<vue.Ref<{
    readonly [x: string]: {
        readonly [x: string]: {
            readonly path: string;
            readonly indexes: readonly number[];
        };
    };
}, {
    readonly [x: string]: {
        readonly [x: string]: {
            readonly path: string;
            readonly indexes: readonly number[];
        };
    };
}>>;
declare const useBlogType: <T extends Record<string, unknown> = Record<string, unknown>>(key?: string) => ComputedRef<BlogTypeData<T>>;

interface BlogCategoryFrontmatterOptions {
    type: 'category';
    /**
     * Unique key under current category
     *
     * 在当前分类下全局唯一的 key
     */
    key: string;
    /**
     * Current category name
     *
     * @description Only available in category item page
     *
     * 当前的分类名称
     *
     * @description 仅在分类子项目页面中可用
     */
    name?: string;
}
interface BlogTypeFrontmatterOptions {
    type: 'type';
    /**
     * Unique key under current category
     *
     * 在当前分类下全局唯一的 key
     */
    key: string;
}
interface BlogPluginCategoryFrontmatter extends PageFrontmatter {
    blog: BlogCategoryFrontmatterOptions;
}
interface BlogPluginTypeFrontmatter extends PageFrontmatter {
    blog: BlogTypeFrontmatterOptions;
}
type BlogPluginFrontmatter = BlogPluginCategoryFrontmatter | BlogPluginTypeFrontmatter;

interface CategoryConfig {
    path: string;
    indexes: number[];
}
type CategoryLocaleMap = Record<
/** Category name */ string, CategoryConfig>;
interface CategoryLocaleConfig {
    /** Main page of category */
    path: string;
    /** Category map for current locale */
    map: CategoryLocaleMap;
}
type CategoryMap = Record<
/** Locale Path */ string, CategoryLocaleConfig>;
type CategoriesMap = Record</** Category key */ string, CategoryMap>;
interface TypeLocaleConfig {
    path: string;
    indexes: number[];
}
type TypeMap = Record</** Locale Path */ string, TypeLocaleConfig>;
type TypesMap = Record</** Type key */ string, TypeMap>;

export { type Article, type BlogCategoryData, type BlogCategoryFrontmatterOptions, type BlogPluginCategoryFrontmatter, type BlogPluginFrontmatter, type BlogPluginTypeFrontmatter, type BlogTypeData, type BlogTypeFrontmatterOptions, type CategoriesMap, type CategoryConfig, type CategoryLocaleConfig, type CategoryLocaleMap, type CategoryMap, type TypeLocaleConfig, type TypeMap, type TypesMap, blogCategoryMap, blogTypeMap, useBlogCategory, useBlogType };
