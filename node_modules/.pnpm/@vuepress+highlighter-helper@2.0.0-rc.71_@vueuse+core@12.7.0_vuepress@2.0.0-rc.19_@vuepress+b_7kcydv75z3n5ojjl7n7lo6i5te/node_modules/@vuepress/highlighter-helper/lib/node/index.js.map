{"version":3,"file":"index.js","sources":["../../src/node/lineNumbers/resolveLineNumbers.ts","../../src/node/lineNumbers/plugin.ts","../../src/node/whitespace.ts","../../src/node/collapsedLines/resolveCollapsedLine.ts","../../src/node/collapsedLines/plugin.ts"],"sourcesContent":["const LINE_NUMBERS_REGEXP = /:line-numbers\\b/\nconst NO_LINE_NUMBERS_REGEXP = /:no-line-numbers\\b/\nconst LINE_NUMBERS_START_REGEXP = /:line-numbers=(\\d+)\\b/\n\n/**\n * Resolve the `:line-numbers` `:line-numbers=num` / `:no-line-numbers` mark from token info\n */\nexport const resolveLineNumbers = (info: string): boolean | number | null => {\n  const lineNumber = LINE_NUMBERS_START_REGEXP.exec(info)?.[1]\n\n  if (lineNumber) {\n    return Number(lineNumber)\n  }\n\n  if (LINE_NUMBERS_REGEXP.test(info)) {\n    return true\n  }\n\n  if (NO_LINE_NUMBERS_REGEXP.test(info)) {\n    return false\n  }\n\n  return null\n}\n","import type { Markdown } from 'vuepress/markdown'\nimport type { MarkdownItLineNumbersOptions } from './options.js'\nimport { resolveLineNumbers } from './resolveLineNumbers.js'\n\nexport const lineNumbers = (\n  md: Markdown,\n  {\n    lineNumbers: lineNumberOptions = true,\n    removeLastLine,\n  }: MarkdownItLineNumbersOptions = {},\n): void => {\n  const rawFence = md.renderer.rules.fence!\n\n  md.renderer.rules.fence = (...args) => {\n    const [tokens, index] = args\n    const token = tokens[index]\n    // get token info\n    const info = token.info ? md.utils.unescapeAll(token.info).trim() : ''\n    const rawCode = rawFence(...args)\n\n    const code = rawCode.slice(\n      rawCode.indexOf('<code>'),\n      rawCode.indexOf('</code>'),\n    )\n\n    const lines = code.split('\\n')\n\n    if (removeLastLine) {\n      lines.pop()\n    }\n\n    // resolve line-numbers mark from token info\n    const lineNumbersInfo =\n      resolveLineNumbers(info) ??\n      (typeof lineNumberOptions === 'number'\n        ? lines.length >= lineNumberOptions\n        : lineNumberOptions)\n\n    if (lineNumbersInfo === false) {\n      return rawCode\n    }\n\n    const startNumbers =\n      typeof lineNumbersInfo === 'number' ? lineNumbersInfo - 1 : 0\n    const lineNumbersStyle = `style=\"counter-reset:line-number ${startNumbers}\"`\n\n    const lineNumbersCode = Array(lines.length)\n      .fill('<div class=\"line-number\"></div>')\n      .join('')\n\n    const lineNumbersWrapperCode = `<div class=\"line-numbers\" aria-hidden=\"true\" ${lineNumbersStyle}>${lineNumbersCode}</div>`\n\n    const finalCode = rawCode\n      .replace(/<\\/div>$/, `${lineNumbersWrapperCode}</div>`)\n      .replace(/\"(language-[^\"]*?)\"/, '\"$1 line-numbers-mode\"')\n\n    return finalCode\n  }\n}\n","export const WHITESPACE_REGEXP = /:whitespace(?:=(all|boundary|trailing)?)?\\b/\nexport const NO_WHITESPACE_REGEXP = /:no-whitespace\\b/\n\nexport type WhitespacePosition = 'all' | 'boundary' | 'trailing'\n\nexport const resolveWhitespacePosition = (\n  info: string,\n  defaultPosition?: WhitespacePosition | boolean,\n): WhitespacePosition | false => {\n  if (NO_WHITESPACE_REGEXP.test(info)) {\n    return false\n  }\n\n  const position = defaultPosition === true ? undefined : defaultPosition\n\n  const match = info.match(WHITESPACE_REGEXP)\n\n  if (match) {\n    return (match[1] as WhitespacePosition | undefined) || position || 'all'\n  }\n\n  return position ?? false\n}\n","const COLLAPSED_LINES_REGEXP = /:collapsed-lines\\b/\nconst COLLAPSED_LINES_START_REGEXP = /:collapsed-lines=(\\d+)\\b/\nconst NO_COLLAPSED_LINES_REGEXP = /:no-collapsed-lines\\b/\n\n/**\n * Resolve the `:collapsed-lines` `:collapsed-lines=num` / `:no-collapsed-lines` mark from token info\n */\nexport function resolveCollapsedLines(info: string): boolean | number | null {\n  const lines = COLLAPSED_LINES_START_REGEXP.exec(info)?.[1]\n\n  if (lines) {\n    return Number(lines)\n  }\n\n  if (COLLAPSED_LINES_REGEXP.test(info)) {\n    return true\n  }\n\n  if (NO_COLLAPSED_LINES_REGEXP.test(info)) {\n    return false\n  }\n\n  return null\n}\n","import type { Markdown } from 'vuepress/markdown'\nimport type { MarkdownItCollapsedLinesOptions } from './options.js'\nimport { resolveCollapsedLines } from './resolveCollapsedLine.js'\n\nexport const collapsedLines = (\n  md: Markdown,\n  {\n    collapsedLines: collapsedLinesOptions = 'disable',\n    removeLastLine,\n  }: MarkdownItCollapsedLinesOptions = {},\n): void => {\n  if (collapsedLinesOptions === 'disable') return\n\n  const rawFence = md.renderer.rules.fence!\n\n  md.renderer.rules.fence = (...args) => {\n    const [tokens, index] = args\n    const token = tokens[index]\n    // get token info\n    const info = token.info ? md.utils.unescapeAll(token.info).trim() : ''\n    const code = rawFence(...args)\n\n    // resolve collapsed-lines mark from token info\n    const collapsedLinesInfo =\n      resolveCollapsedLines(info) ?? collapsedLinesOptions\n\n    if (collapsedLinesInfo === false) {\n      return code\n    }\n\n    const lines =\n      code.slice(code.indexOf('<code>'), code.indexOf('</code>')).split('\\n')\n        .length - (removeLastLine ? 1 : 0)\n    const startLines =\n      typeof collapsedLinesInfo === 'number' ? collapsedLinesInfo : 15\n\n    if (lines < startLines) {\n      return code\n    }\n\n    const collapsedLinesCode = `<div class=\"collapsed-lines\"></div>`\n    const styles = `--vp-collapsed-lines:${startLines};`\n\n    const finalCode = code\n      .replace(/<\\/div>$/, `${collapsedLinesCode}</div>`)\n      .replace(/\"(language-[^\"]*?)\"/, '\"$1 has-collapsed-lines collapsed\"')\n      .replace(/^<div[^>]*>/, (match) => {\n        if (!match.includes('style=')) {\n          return `${match.slice(0, -1)} style=\"${styles}\">`\n        }\n        return match.replace(/(style=\")/, `$1${styles}`)\n      })\n\n    return finalCode\n  }\n}\n"],"names":["LINE_NUMBERS_REGEXP","NO_LINE_NUMBERS_REGEXP","LINE_NUMBERS_START_REGEXP","resolveLineNumbers","info","lineNumber","lineNumbers","md","lineNumberOptions","removeLastLine","rawFence","args","tokens","index","token","rawCode","lines","lineNumbersInfo","lineNumbersStyle","lineNumbersCode","lineNumbersWrapperCode","WHITESPACE_REGEXP","NO_WHITESPACE_REGEXP","resolveWhitespacePosition","defaultPosition","position","match","COLLAPSED_LINES_REGEXP","COLLAPSED_LINES_START_REGEXP","NO_COLLAPSED_LINES_REGEXP","resolveCollapsedLines","collapsedLines","collapsedLinesOptions","code","collapsedLinesInfo","startLines","collapsedLinesCode","styles"],"mappings":"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"}