{"version":3,"file":"index.js","sources":["../src/dedent.ts","../src/escape.ts","../src/reg.ts"],"sourcesContent":["export const dedent = (text: string): string => {\n  const lines = text.split(\"\\n\");\n\n  const minIndentLength = lines.reduce((acc, line) => {\n    for (let i = 0; i < line.length; i++)\n      if (line[i] !== \" \" && line[i] !== \"\\t\") return Math.min(i, acc);\n\n    return acc;\n  }, Infinity);\n\n  if (minIndentLength < Infinity)\n    return lines.map((x) => x.slice(minIndentLength)).join(\"\\n\");\n\n  return text;\n};\n","export const escapeHtml = (unsafeHTML: string): string =>\n  unsafeHTML\n    .replace(/&/gu, \"&amp;\")\n    .replace(/</gu, \"&lt;\")\n    .replace(/>/gu, \"&gt;\")\n    .replace(/\"/gu, \"&quot;\")\n    .replace(/'/gu, \"&#39;\");\n\n/**\n * Escapes special characters in string s such that the string\n * can be used in `new RegExp`. For example \"[\" becomes \"\\\\[\".\n */\nexport const escapeRegExp = (regexp: string): string =>\n  regexp.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n","// https://spec.commonmark.org/0.29/#line-ending\nexport const NEWLINE_RE = /\\r\\n?|\\n/g;\n\nexport const UNESCAPE_RE = /\\\\([ \\\\!\"#$%&'()*+,./:;<=>?@[\\]^_`{|}~-])/gu;\n"],"names":["dedent","text","lines","minIndentLength","acc","line","i","x","escapeHtml","unsafeHTML","escapeRegExp","regexp","NEWLINE_RE","UNESCAPE_RE"],"mappings":"AAAO,MAAMA,EAAUC,GAAyB,CAC9C,MAAMC,EAAQD,EAAK,MAAM;AAAA,CAAI,EAEvBE,EAAkBD,EAAM,OAAO,CAACE,EAAKC,IAAS,CAClD,QAASC,EAAI,EAAGA,EAAID,EAAK,OAAQC,IAC/B,GAAID,EAAKC,CAAC,IAAM,KAAOD,EAAKC,CAAC,IAAM,IAAM,OAAO,KAAK,IAAIA,EAAGF,CAAG,EAEjE,OAAOA,CACT,EAAG,GAAQ,EAEX,OAAID,EAAkB,IACbD,EAAM,IAAKK,GAAMA,EAAE,MAAMJ,CAAe,CAAC,EAAE,KAAK;AAAA,CAAI,EAEtDF,CACT,ECdaO,EAAcC,GACzBA,EACG,QAAQ,MAAO,OAAO,EACtB,QAAQ,MAAO,MAAM,EACrB,QAAQ,MAAO,MAAM,EACrB,QAAQ,MAAO,QAAQ,EACvB,QAAQ,MAAO,OAAO,EAMdC,EAAgBC,GAC3BA,EAAO,QAAQ,wBAAyB,MAAM,ECZnCC,EAAa,YAEbC,EAAc"}