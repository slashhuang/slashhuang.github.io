{"version":3,"file":"index.js","sources":["../../src/node/logger.ts","../../src/node/getInfo.ts","../../src/node/getSitemap.ts","../../src/node/getSitemapTemplate.ts","../../src/node/outputSitemap.ts","../../src/node/sitemapPlugin.ts"],"sourcesContent":["import { Logger } from '@vuepress/helper'\n\nexport const PLUGIN_NAME = '@vuepress/plugin-sitemap'\n\nexport const logger = new Logger(PLUGIN_NAME)\n","import type { GitData } from '@vuepress/plugin-git'\nimport type { App, Page } from 'vuepress/core'\nimport { removeLeadingSlash } from 'vuepress/shared'\nimport type {\n  SitemapImageOption,\n  SitemapLinkOption,\n  SitemapNewsOption,\n  SitemapPluginFrontmatter,\n  SitemapPluginOptions,\n  SitemapVideoOption,\n} from '../typings/index.js'\nimport { logger } from './logger.js'\n\nconst reportedLocales: string[] = []\n\nconst stripLocalePrefix = ({ path, pathLocale }: Page): string =>\n  path.replace(pathLocale, '/')\n\n/**\n * @returns A map with keys of rootPath and string[] value for pathLocales\n */\nconst getPagesLocaleMap = (app: App): Map<string, string[]> =>\n  app.pages.reduce((map, page) => {\n    const rootPath = stripLocalePrefix(page)\n    const pathLocales = map.get(rootPath) ?? []\n\n    pathLocales.push(page.pathLocale)\n\n    return map.set(rootPath, pathLocales)\n  }, new Map<string, string[]>())\n\nexport interface SitemapInfo {\n  lastmod?: string\n  changefreq?: string\n  priority?: number\n  img?: SitemapImageOption[]\n  video?: SitemapVideoOption[]\n  links?: SitemapLinkOption[]\n  news?: SitemapNewsOption[]\n}\n\nexport const getSitemapInfos = (\n  app: App,\n  options: SitemapPluginOptions,\n): [path: string, info: SitemapInfo][] => {\n  const {\n    changefreq = 'daily',\n    excludePaths = ['/404.html'],\n    modifyTimeGetter = (page: Page<{ git?: GitData }>): string =>\n      page.data.git?.updatedTime\n        ? new Date(page.data.git.updatedTime).toISOString()\n        : '',\n  } = options\n  const { base, locales } = app.siteData\n\n  const pageLocalesMap = getPagesLocaleMap(app)\n\n  const sitemapInfos: [path: string, info: SitemapInfo][] = []\n\n  app.pages.forEach(\n    (\n      page: Page<\n        Record<string, unknown> & { git?: GitData },\n        SitemapPluginFrontmatter\n      >,\n    ) => {\n      const pageOptions = page.frontmatter.sitemap\n\n      if (pageOptions === false) return\n\n      const metaRobotTags = (page.frontmatter.head ?? []).find(\n        (head) => head[1].name === 'robots',\n      )\n\n      if (\n        // meta tags do not allow index\n        ((metaRobotTags?.[1].content as string) || '')\n          .split(/,/u)\n          .map((content) => content.trim())\n          .includes('noindex') ||\n        // exclude in plugin options\n        excludePaths.includes(page.path)\n      )\n        return\n\n      const lastModifyTime = modifyTimeGetter(page, app)\n      const rootPath = stripLocalePrefix(page)\n      const relatedLocales = pageLocalesMap.get(rootPath)!\n\n      let links: SitemapLinkOption[] = []\n\n      if (relatedLocales.length > 1) {\n        // warnings for missing `locale[path].lang` in debug mode\n        if (app.env.isDebug)\n          relatedLocales.forEach((localePrefix) => {\n            if (\n              !locales[localePrefix].lang &&\n              !reportedLocales.includes(localePrefix)\n            ) {\n              logger.warn(`\"lang\" option for ${localePrefix} is missing`)\n              reportedLocales.push(localePrefix)\n            }\n          })\n\n        links = relatedLocales.map((localePrefix) => ({\n          // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n          lang: locales[localePrefix]?.lang ?? 'en',\n          url: `${base}${removeLeadingSlash(localePrefix)}${rootPath.substring(1)}`,\n        }))\n      }\n\n      const sitemapInfo: SitemapInfo = {\n        changefreq,\n        links,\n        ...(lastModifyTime ? { lastmod: lastModifyTime } : {}),\n        ...pageOptions,\n      }\n\n      // log sitemap info in debug mode\n      if (app.env.isDebug)\n        logger.info(\n          `sitemap option for ${page.path}: ${JSON.stringify(\n            sitemapInfo,\n            null,\n            2,\n          )}`,\n        )\n\n      sitemapInfos.push([page.path, sitemapInfo])\n    },\n  )\n\n  return sitemapInfos\n}\n","import { SitemapStream, streamToPromise } from 'sitemap'\nimport type { App } from 'vuepress/core'\nimport { removeLeadingSlash } from 'vuepress/shared'\nimport type { SitemapPluginOptions } from '../typings/index.js'\nimport { getSitemapInfos } from './getInfo.js'\n\nexport const getSiteMap = async (\n  app: App,\n  options: SitemapPluginOptions,\n  hostname: string,\n): Promise<[path: string, content: string]> => {\n  const { extraUrls = [], xmlNameSpace: xmlns } = options\n  const sitemapFilename = options.sitemapFilename\n    ? removeLeadingSlash(options.sitemapFilename)\n    : 'sitemap.xml'\n  const sitemapXSLFilename = options.sitemapXSLFilename\n    ? removeLeadingSlash(options.sitemapXSLFilename)\n    : 'sitemap.xsl'\n\n  const {\n    options: { base },\n  } = app\n\n  const sitemapInfos = getSitemapInfos(app, options)\n\n  const sitemapStream = new SitemapStream({\n    hostname,\n    ...(xmlns ? { xmlns } : {}),\n  })\n\n  sitemapInfos.forEach(([path, info]) =>\n    sitemapStream.write({\n      url: `${base}${removeLeadingSlash(path)}`,\n      ...info,\n    }),\n  )\n\n  extraUrls.forEach((item) =>\n    sitemapStream.write({ url: `${base}${removeLeadingSlash(item)}` }),\n  )\n\n  sitemapStream.end()\n\n  return streamToPromise(sitemapStream).then((data) => [\n    sitemapFilename,\n    data.toString().replace(\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      `\\\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"${base}${sitemapXSLFilename}\"?>\n`,\n    ),\n  ])\n}\n","import { getModulePath } from '@vuepress/helper'\nimport { removeLeadingSlash } from 'vuepress/shared'\nimport { fs } from 'vuepress/utils'\nimport type { SitemapPluginOptions } from '../typings/index.js'\nimport { PLUGIN_NAME } from './logger.js'\n\nconst DEFAULT_TEMPLATE_PATH = getModulePath(\n  `${PLUGIN_NAME}/templates/sitemap.xsl`,\n  import.meta,\n)\n\nexport const getSiteMapTemplate = (\n  options: SitemapPluginOptions,\n): [path: string, content: string] => [\n  options.sitemapXSLFilename\n    ? removeLeadingSlash(options.sitemapXSLFilename)\n    : 'sitemap.xsl',\n  options.sitemapXSLTemplate ?? fs.readFileSync(DEFAULT_TEMPLATE_PATH, 'utf-8'),\n]\n","import type { App } from 'vuepress/core'\nimport { colors, fs } from 'vuepress/utils'\nimport type { SitemapPluginOptions } from '../typings/index.js'\nimport { getSiteMap } from './getSitemap.js'\nimport { getSiteMapTemplate } from './getSitemapTemplate.js'\nimport { logger } from './logger.js'\n\nexport const outputSitemap = async (\n  app: App,\n  options: SitemapPluginOptions,\n  hostname: string,\n): Promise<void> => {\n  const {\n    dir,\n    options: { base },\n  } = app\n\n  const [sitemapPath, sitemapContent] = await getSiteMap(app, options, hostname)\n  const [templatePath, templateContent] = getSiteMapTemplate(options)\n\n  fs.writeFileSync(app.dir.dest(sitemapPath), sitemapContent)\n  fs.writeFileSync(app.dir.dest(templatePath), templateContent)\n\n  logger.succeed(`Generating sitemap to ${colors.cyan(sitemapPath)}`)\n\n  const robotTxtPath = dir.dest('robots.txt')\n\n  if (fs.existsSync(robotTxtPath)) {\n    const { succeed } = logger.load(\n      `Appended sitemap path to ${colors.cyan('robots.txt')}`,\n    )\n\n    const robotsTxt = await fs.readFile(robotTxtPath, 'utf-8')\n\n    const newRobotsTxtContent = `${robotsTxt.replace(\n      /^Sitemap: .*$/u,\n      '',\n    )}\\nSitemap: ${hostname}${base}${sitemapPath}\\n`\n\n    await fs.writeFile(robotTxtPath, newRobotsTxtContent, {\n      encoding: 'utf-8',\n      flag: 'w',\n    })\n\n    succeed()\n  }\n}\n","import { customizeDevServer } from '@vuepress/helper'\nimport type { PluginFunction, PluginObject } from 'vuepress/core'\nimport { isLinkHttp, removeEndingSlash } from 'vuepress/shared'\nimport { colors } from 'vuepress/utils'\nimport type { SitemapPluginOptions } from '../typings/index.js'\nimport { getSiteMap } from './getSitemap.js'\nimport { getSiteMapTemplate } from './getSitemapTemplate.js'\nimport { PLUGIN_NAME, logger } from './logger.js'\nimport { outputSitemap } from './outputSitemap.js'\n\nexport const sitemapPlugin =\n  (options: SitemapPluginOptions): PluginFunction =>\n  (app) => {\n    if (app.env.isDebug) logger.info('Options:', options)\n\n    const plugin: PluginObject = {\n      name: PLUGIN_NAME,\n    }\n\n    let hostname = app.env.isDev\n      ? options.devHostname || `http://localhost:${app.options.port}`\n      : options.hostname\n\n    if (!hostname) {\n      logger.error(`Option ${colors.magenta('hostname')} is required!`)\n\n      return plugin\n    }\n\n    // make sure hostname do not end with `/`\n    hostname = removeEndingSlash(\n      isLinkHttp(hostname) ? hostname : `https://${hostname}`,\n    )\n\n    return {\n      ...plugin,\n\n      extendsBundlerOptions: async (config): Promise<void> => {\n        if (options.devServer)\n          [\n            await getSiteMap(app, options, hostname),\n            getSiteMapTemplate(options),\n          ].forEach(([path, content]) => {\n            customizeDevServer(config, app, {\n              path,\n              response: async () => Promise.resolve(content),\n              errMsg: 'Unexpected sitemap generation error',\n            })\n          })\n      },\n\n      onGenerated: (): Promise<void> => outputSitemap(app, options, hostname),\n    }\n  }\n"],"names":["PLUGIN_NAME","logger","Logger","reportedLocales","stripLocalePrefix","path","pathLocale","getPagesLocaleMap","app","map","page","rootPath","pathLocales","getSitemapInfos","options","changefreq","excludePaths","modifyTimeGetter","base","locales","pageLocalesMap","sitemapInfos","pageOptions","head","content","lastModifyTime","relatedLocales","links","localePrefix","removeLeadingSlash","sitemapInfo","getSiteMap","hostname","extraUrls","xmlns","sitemapFilename","sitemapXSLFilename","sitemapStream","SitemapStream","info","item","streamToPromise","data","DEFAULT_TEMPLATE_PATH","getModulePath","getSiteMapTemplate","fs","outputSitemap","dir","sitemapPath","sitemapContent","templatePath","templateContent","colors","robotTxtPath","succeed","newRobotsTxtContent","sitemapPlugin","plugin","removeEndingSlash","isLinkHttp","config","customizeDevServer"],"mappings":"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"}